
parse_table_action=[
    [('S', 2), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],    
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), ('a', 'cc')], 
        [(0, 0), ('S', 3), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],    
        [('e', 6), ('e', 6), ('e', 6), ('S', 4), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6), ('e', 6)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('S', 6), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],    
        [(0, 0), (0, 0), (0, 0), (0, 0), ('S', 7), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],    
        [(0, 0), ('S', 10), (0, 0), ('r', 10), (0, 0), ('S', 6), ('r', 10), (0, 0), ('S', 13), (0, 0), ('S', 14), ('r', 10), ('S', 15), (0, 0), ('r', 10), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), ('r', 1)],    
        [(0, 0), (0, 0), (0, 0), ('S', 17), (0, 0), (0, 0), ('S', 16), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],
        [(0, 0), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('r', 3), ('e', 2), ('r', 3)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('S', 18), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],   
        [(0, 0), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('r', 6), ('e', 2), ('r', 6)],
        [(0, 0), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('r', 7), ('e', 2), ('r', 7)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), ('S', 10), (0, 0), ('r', 10), (0, 0), ('S', 6), ('r', 10), (0, 0), ('S', 13), (0, 0), ('S', 14), ('r', 10), ('S', 15), (0, 0), ('r', 10), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('r', 2), ('e', 2), ('r', 2)],
        [(0, 0), ('S', 10), (0, 0), ('r', 10), (0, 0), ('S', 6), ('r', 10), (0, 0), ('S', 13), (0, 0), ('S', 14), ('r', 10), ('S', 15), (0, 0), ('r', 10), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('S', 28), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],   
        [(0, 0), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('S', 30), ('S', 29), ('S', 31), ('S', 32), ('S', 33), ('S', 34), ('S', 35), ('e', 3), ('e', 2), (0, 0)],
        [(0, 0), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20), ('r', 20)],
        [(0, 0), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21), ('r', 21)],
        [(0, 0), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22), ('r', 22)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), (0, 0), (0, 0), ('S', 17), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('S', 37), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('S', 38), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],   
        [(0, 0), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('r', 4), ('e', 2), ('r', 4)],
        [(0, 0), ('S', 10), (0, 0), ('r', 10), (0, 0), ('S', 6), ('r', 10), (0, 0), ('S', 13), (0, 0), ('S', 14), ('r', 10), ('S', 15), (0, 0), ('r', 10), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), (0, 0), ('S', 23), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), ('e', 3), ('e', 3), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('e', 4), ('S', 31), ('S', 32), ('S', 33), ('S', 34), ('S', 35), ('e', 3), ('S', 47), ('e', 4)],
        [(0, 0), ('S', 22), ('S', 23), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('e', 1), ('S', 24), ('e', 2), (0, 0)],
        [(0, 0), ('S', 10), (0, 0), ('r', 10), (0, 0), ('S', 6), ('r', 10), (0, 0), ('S', 13), (0, 0), ('S', 14), ('r', 10), ('S', 15), (0, 0), ('r', 10), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],
        [(0, 0), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('r', 8), ('e', 2), ('r', 8)],
        [(0, 0), ('e', 3), ('e', 3), ('r', 13), ('e', 3), ('e', 3), ('r', 13), ('e', 3), ('e', 3), ('r', 13), ('e', 3), ('r', 13), ('e', 3), ('r', 13), ('r', 13), ('e', 3), ('e', 3), ('S', 31), ('S', 32), ('S', 33), ('S', 34), ('S', 35), ('e', 3), ('e', 2), (0, 0)],
        [(0, 0), ('e', 3), ('e', 3), ('r', 14), ('e', 3), ('e', 3), ('r', 14), ('e', 3), ('e', 3), ('r', 14), ('e', 3), ('r', 14), ('e', 3), ('r', 14), ('r', 14), ('e', 3), ('e', 3), ('S', 31), ('S', 32), ('S', 33), ('S', 34), ('S', 35), ('e', 3), ('e', 2), (0, 0)],
        [(0, 0), ('e', 3), ('e', 3), ('r', 15), ('e', 3), ('e', 3), ('r', 15), ('e', 3), ('e', 3), ('r', 15), ('e', 3), ('r', 15), ('e', 3), ('r', 15), ('r', 15), ('r', 15), ('r', 15), ('r', 15), ('r', 15), ('S', 33), ('S', 34), ('S', 35), ('e', 3), ('r', 15), (0, 0)],
        [(0, 0), ('e', 3), ('e', 3), ('r', 16), ('e', 3), ('e', 3), ('r', 16), ('e', 3), ('e', 3), ('r', 16), ('e', 3), ('r', 16), ('e', 3), ('r', 16), ('r', 16), ('r', 16), ('r', 16), ('r', 16), ('r', 16), ('S', 33), ('S', 34), ('S', 35), ('e', 3), ('r', 16), (0, 0)],
        [(0, 0), ('e', 3), ('e', 3), ('r', 17), ('e', 3), ('e', 3), ('r', 17), ('e', 3), ('e', 3), ('r', 17), ('e', 3), ('r', 17), ('e', 3), ('r', 17), ('r', 17), ('r', 17), ('r', 17), ('r', 17), ('r', 17), ('r', 17), ('r', 17), ('S', 35), ('e', 3), ('r', 17), (0, 0)],
        [(0, 0), ('e', 3), ('e', 3), ('r', 18), ('e', 3), ('e', 3), ('r', 18), ('e', 3), ('e', 3), ('r', 18), ('e', 3), ('r', 18), ('e', 3), ('r', 18), ('r', 18), ('r', 18), ('r', 18), ('r', 18), ('r', 18), ('r', 18), ('r', 18), ('S', 35), ('e', 3), ('r', 18), (0, 0)],
        [(0, 0), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19), ('r', 19)],
        [(0, 0), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23), ('r', 23)],
        [(0, 0), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('r', 9), ('e', 2), ('r', 9)],
        [(0, 0), (0, 0), (0, 0), ('r', 11), (0, 0), (0, 0), ('r', 11), (0, 0), (0, 0), (0, 0), (0, 0), ('r', 11), (0, 0), (0, 0), ('S', 51), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],
        [(0, 0), ('e', 3), ('e', 3), ('r', 5), ('e', 3), ('e', 3), ('r', 5), ('e', 3), ('e', 3), ('e', 3), ('e', 3), ('r', 5), ('e', 3), ('e', 3), ('r', 5), ('e', 3), ('e', 3), ('S', 31), ('S', 32), ('S', 33), ('S', 34), ('S', 35), (0, 0), ('e', 2), (0, 0)],
        [(0, 0), ('S', 10), (0, 0), ('r', 10), (0, 0), (0, 0), ('r', 10), (0, 0), ('S', 13), (0, 0), ('S', 14), ('r', 10), (0, 0), (0, 0), ('r', 10), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), ('e', 2), (0, 0)],
        [(0, 0), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('r', 12), ('e', 2), ('r', 12)],
]
#[stack:[id:('s/r/acc',1)]]
parse_table_goto=[
        [('s', 1), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), ('s', 5), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), ('s', 11), ('s', 8), (0, 64), ('s', 12), (0, 64), ('s', 9), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), ('s', 20), (0, 64), ('s', 19), (0, 64), ('s', 21)],
        [(0, 64), ('s', 11), ('s', 25), (0, 64), ('s', 12), (0, 64), ('s', 9), (0, 64)],
        [(0, 64), (0, 64), (0, 64), ('s', 20), (0, 64), ('s', 26), (0, 64), ('s', 21)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), ('s', 11), (0, 64), (0, 64), ('s', 12), (0, 64), ('s', 27), (0, 64)],
        [(0, 64), (0, 64), (0, 64), ('s', 50), (0, 64), (0, 64), (0, 64), ('s', 21)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), ('s', 36), (0, 64), (0, 64), (0, 64), ('s', 21)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), ('s', 11), (0, 64), (0, 64), ('s', 12), (0, 64), ('s', 39), (0, 64)],
        [(0, 64), (0, 64), (0, 64), ('s', 40), (0, 64), (0, 64), (0, 64), ('s', 21)],
        [(0, 64), (0, 64), (0, 64), ('s', 41), (0, 64), (0, 64), (0, 64), ('s', 21)],
        [(0, 64), (0, 64), (0, 64), ('s', 42), (0, 64), (0, 64), (0, 64), ('s', 21)],
        [(0, 64), (0, 64), (0, 64), ('s', 43), (0, 64), (0, 64), (0, 64), ('s', 21)],
        [(0, 64), (0, 64), (0, 64), ('s', 44), (0, 64), (0, 64), (0, 64), ('s', 21)],
        [(0, 64), (0, 64), (0, 64), ('s', 45), (0, 64), (0, 64), (0, 64), ('s', 21)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), ('s', 46)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), ('s', 20), (0, 64), ('s', 48), (0, 64), ('s', 21)],
        [(0, 64), ('s', 11), (0, 64), (0, 64), ('s', 12), (0, 64), ('s', 49), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)],
        [(0, 64), ('s', 11), (0, 64), (0, 64), ('s', 12), (0, 64), ('s', 52), (0, 64)],
        [(0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64), (0, 64)]
]
reduce_token=[
    ((25, 'S'), 5), ((26, 'compound_stmt'), 3), ((27, 'stmts'), 1), ((27, 'stmts'), 3), ((31, 'stmt'), 3), ((31, 'stmt'), 1), ((31, 'stmt'), 1), ((31, 'stmt'), 4), ((31, 'stmt'), 4), ((31, 'stmt'), 0), ((29, 'if_stmt'), 4), ((29, 'if_stmt'), 6), ((30, 'bool'), 3), ((30, 'bool'), 3), ((28, 'expr'), 3), ((28, 'expr'), 3), ((28, 'expr'), 3), ((28, 'expr'), 3), ((28, 'expr'), 3), ((28, 'expr'), 1), ((32, 'factor'), 1), ((32, 'factor'), 1), ((32, 'factor'), 3), ((40, "S'"), 1)
]
reduction_list=[
    'S ->  program id ; compound_stmt', 'compound_stmt ->  begin stmts end', 'stmts ->  stmt', 'stmts ->  stmts; stmt', 'stmt ->  id := expr', 'stmt -> compound_stmt', 'stmt -> if_stmt', 'stmt -> while bool do stmt', 'stmt -> repeat stmt until bool', 'stmt -> ε', 'if_stmt ->  if bool then stmt', 'if_stmt ->  if bool then stmt else stmt', 'bool ->  expr > expr', 'bool ->  expr < expr', 'expr ->  expr + expr', 'expr ->  expr - expr', 'expr ->  expr * expr', 'expr ->  expr / expr', 'expr ->  expr ^ factor', 'expr ->  factor', 'factor ->  id', 'factor ->  num', 'factor ->  ( expr )', "S'-> S"
    ]
symbol_table={}
def print_stack(symbol):
    output=''
    for each in symbol:
        output+=(each[1]+' ')
    # output+='\n'
    return output
def move_on(current_act,token,token_index,stack,symbol,stack_rear,symbol_rear):
    act=current_act[0]
    error_flag=0
    if act=='S':
        stack,symbol,stack_rear,symbol_rear,output=shift(current_act[1],token,stack,symbol,stack_rear,symbol_rear)
        token_index+=1
    elif act=='r':
        stack,symbol,stack_rear,symbol_rear,output=reduce(current_act[1],stack,symbol,stack_rear,symbol_rear)
    else:
        try:
            tmp=current_act[0]+str(current_act[1])
        except TypeError:
            print('in move_on')
            print('stack: {}, symbols:{}'.format(stack,symbol))
            print(token)
            print(parse_table_action[stack[stack_rear]][token[0]])
            exit(1)
            # return stack,symbol,stack_rear,symbol_rear,token_index,result,1
        stack,symbol,stack_rear,symbol_rear,output=error_routine[tmp](stack,symbol,stack_rear,symbol_rear)
        output+=' in Line {}'.format(token[2])
        if current_act[1]==2:   #e2
            token_index+=1
        error_flag=1
    result=(output,error_flag)
    return stack,symbol,stack_rear,symbol_rear,token_index,result
def shift(state,token,stack,symbol,stack_rear,symbol_rear):
    '''
    targeted state and token 
    '''
    stack.append(state)
    stack_rear+=1
    symbol.append(token)
    symbol_rear+=1
    print('stack: {}, \tsymbols:{}'.format(stack,symbol))
    output='shift to state {}'.format(state)
    return stack,symbol,stack_rear,symbol_rear,output
def reduce(redcution,stack,symbol,stack_rear,symbol_rear):
    '''
    number of reduction rule 
    '''
    redcution-=1
    try:
        for i in range(0,reduce_token[redcution][1]):
            sym_tmp=symbol.pop()
            symbol_rear-=1
            tmp=stack.pop()
            stack_rear-=1
    except IndexError:
        print(redcution)
        exit(1)
    symbol.append(reduce_token[redcution][0])
    symbol_rear+=1
    try:
        goto_state=parse_table_goto[stack[stack_rear]][symbol[symbol_rear][0]-25]
    except IndexError:
        print('goto in entry {} {}'.format(stack[stack_rear],symbol[symbol_rear][0]-25))
        exit(1)
    stack.append(goto_state[1])
    stack_rear+=1
    print('stack: {}, \tsymbols:{}'.format(stack,symbol))
    output='reduce:{}'.format(reduction_list[redcution])
    return stack,symbol,stack_rear,symbol_rear,output
def e1(stack,symbol,stack_rear,symbol_rear):
    stack.append(22)
    stack_rear+=1
    symbol.append((1,'id'))
    symbol_rear+=1
    output ='missing operand'
    return stack,symbol,stack_rear,symbol_rear,output
def e2(stack,symbol,stack_rear,symbol_rear):
    # print('unbalanced right parenthesis')
    output ='unbalanced right parenthesis'
    return stack,symbol,stack_rear,symbol_rear,output
def e3(stack,symbol,stack_rear,symbol_rear):
    stack.append(35)
    stack_rear+=1
    symbol.append((21,'^'))
    symbol_rear+=1
    output ='missing operator\n'
    # print('missing operator')
    return stack,symbol,stack_rear,symbol_rear,output
def e4(stack,symbol,stack_rear,symbol_rear):
    stack.append(47)
    stack_rear+=1
    symbol.append((22,')'))
    symbol_rear+=1
    # print('missing right parenthesis')
    output ='missing right parenthesis\n'
    return stack,symbol,stack_rear,symbol_rear,output
def e6(stack,symbol,stack_rear,symbol_rear):
    stack.append(4)
    stack_rear+=1
    symbol.append((3,';'))
    symbol_rear+=1
    # print('missing right parenthesis')
    output ='missing symbol ";" \n'
    return stack,symbol,stack_rear,symbol_rear,output
error_routine={
    # 's':shift,
    # 'r':reduce,
    'e1':e1,
    'e2':e2,
    'e3':e3,
    'e4':e4,
    'e6':e6
}
def syntax_parse(token_list):
    stack=[0]
    # for the sake of simulating stack in python, give a initial symbol to symbol stack
    symbol=[(-1,'$')]
    stack_rear=len(stack)-1
    symbol_rear=len(symbol)-1
    token_index=0
    token_list.append((24,'$'))
    token_len=len(token_list)
    # print results
    action=[]
    state_symbol=[]
    current_act=parse_table_action[stack[stack_rear]][token_list[0][0]]
    while current_act[0]!='a':
        stack,symbol,stack_rear,symbol_rear,token_index,output=move_on(current_act,token_list[token_index],token_index,stack,symbol,stack_rear,symbol_rear)
        state_symbol.append(print_stack(symbol))
        action.append(output)
        try:
            current_act=parse_table_action[stack[stack_rear]][token_list[token_index][0]]
        except IndexError:
            print('In Parse')
            print('stack: {}, symbols:{}'.format(stack,symbol))
            print(stack[stack_rear])
            print(token_list[token_index])
            exit(1)
    return action,state_symbol
def arrange(action,symbol):
    output=''
    error_flag=0
    error_report=''
    for index,each in enumerate(action):
        if each[1]==1:
            error_flag=1
            error_report+='{}\n'.format(each[0])
        output+='{}\t\t\t\t\t\t\t{}\n'.format(symbol[index],action[index][0])
    return output,error_report,error_flag
# def error_report(action):
#     output=''
#     for each in action:
#         if each[1]==1:
#             output+='{}\n'.format(each[0])
#     return output
# def e11(stack,symbol,stack_rear,symbol_rear):
#     stack.append(3)
#     stack_rear+=1
#     symbol.append((8,')'))
#     symbol_rear+=1
#     # print('missing right parenthesis')
#     output ='missing right parenthesis\n'
#     return stack,symbol,stack_rear,symbol_rear,output 

    # if token[token_len-1][0]!=24:
    #     token.append((24,'$'))
    #     token_len+=1
    # # while token_index<token_len:
    #     # current_act=parse_table_action[stack[stack_rear]][token[token_index][0]]
    #     try:
    #         current_act=parse_table_action[stack[stack_rear]][token[token_index][0]]
    #     except IndexError as ie:
    #         print('{} {}'.format(token_index,stack_rear))
    #         break
    #     if current_act[0]=='a':
    #         stack=[0]
    #         symbol=[(-1,'$')]
    #         stack_rear=len(stack)-1
    #         symbol_rear=len(symbol)-1
    #         token_index+=1
    #         continue